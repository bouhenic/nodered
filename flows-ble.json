[
    {
        "id": "70ac6febe8cbd9d6",
        "type": "tab",
        "label": "Flux 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "df6d64337797179e",
        "type": "mqtt in",
        "z": "70ac6febe8cbd9d6",
        "name": "",
        "topic": "ble/sensor",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6ea126c6d2972499",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 120,
        "wires": [
            [
                "7d0cac3061432060"
            ]
        ]
    },
    {
        "id": "5b7d87de8cbd7e68",
        "type": "debug",
        "z": "70ac6febe8cbd9d6",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 160,
        "wires": []
    },
    {
        "id": "0bcdcca29c50248a",
        "type": "inject",
        "z": "70ac6febe8cbd9d6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "94f6311068a60b30"
            ]
        ]
    },
    {
        "id": "94f6311068a60b30",
        "type": "mqtt out",
        "z": "70ac6febe8cbd9d6",
        "name": "",
        "topic": "ble/relay/command",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "6ea126c6d2972499",
        "x": 490,
        "y": 500,
        "wires": []
    },
    {
        "id": "d0036c684b3f438a",
        "type": "inject",
        "z": "70ac6febe8cbd9d6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "94f6311068a60b30"
            ]
        ]
    },
    {
        "id": "9237f635da3ef3aa",
        "type": "ui_switch",
        "z": "70ac6febe8cbd9d6",
        "name": "",
        "label": "OFF/ON",
        "tooltip": "",
        "group": "cb8132b80dc6faae",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 340,
        "y": 620,
        "wires": [
            [
                "b6ec993f3968460f",
                "94f6311068a60b30"
            ]
        ]
    },
    {
        "id": "05918bad86e147d9",
        "type": "ui_switch",
        "z": "70ac6febe8cbd9d6",
        "name": "",
        "label": "AUTO/MANUEL",
        "tooltip": "",
        "group": "91953b41a430d82f",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 120,
        "y": 720,
        "wires": [
            [
                "9a6cb53e9488854f",
                "39f9625d0de0a14d"
            ]
        ]
    },
    {
        "id": "a5adaee9213e59f2",
        "type": "debug",
        "z": "70ac6febe8cbd9d6",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 980,
        "wires": []
    },
    {
        "id": "9a6cb53e9488854f",
        "type": "change",
        "z": "70ac6febe8cbd9d6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 620,
        "wires": [
            [
                "9237f635da3ef3aa"
            ]
        ]
    },
    {
        "id": "7d0cac3061432060",
        "type": "function",
        "z": "70ac6febe8cbd9d6",
        "name": "Conversion ",
        "func": "// Récupère la valeur du payload supposée être la valeur lue par le CAN\nlet valeurCAN = msg.payload;\n\n// Convertit la valeur CAN en pourcentage avec l'inversion\nlet pourcentage = (1 - valeurCAN / 4095) * 100;\n\n// Arrondit le résultat à deux décimales, si nécessaire\npourcentage = Math.round(pourcentage * 100) / 100;\n\n// Met à jour le payload avec le pourcentage calculé\nmsg.payload = pourcentage;\n\n// Retourne le message modifié\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "7e07796be2a12efb",
                "30a02454f9801a96",
                "632367f7e5db0a76"
            ]
        ]
    },
    {
        "id": "7e07796be2a12efb",
        "type": "function",
        "z": "70ac6febe8cbd9d6",
        "name": "Arrosage",
        "func": "// Initialise les variables\nlet etatArrosage;\nconst seuilBas = 30;\nconst seuilHaut = 60;\nlet mode = flow.get('mode');\n\n// Vérifie si le payload contient une valeur numérique\nlet humidite = parseFloat(msg.payload);\nif (isNaN(humidite)) {\n    // Gère le cas où humidite n'est pas un nombre\n    // Par exemple, définir etatArrosage à une valeur indiquant une erreur ou ignorer la mise à jour\n    etatArrosage = \"Erreur: valeur d'humidité non valide\";\n} else {\n    // Le payload est un nombre, continue avec la logique existante\n    if (mode === false) {\n        if (humidite < seuilBas) {\n            // Si l'humidité est inférieure à 30% et le mode automatique est activé, déclenche l'arrosage\n            etatArrosage = 1;\n        } else if (humidite > seuilHaut) {\n            // Si l'humidité est supérieure à 60% et le mode automatique est activé, stoppe l'arrosage\n            etatArrosage = 0;\n        } else {\n            // Si l'humidité est entre 30% et 60% et le mode automatique est activé, ne change rien\n            etatArrosage = flow.get(\"state\") || \"État inconnu\"; // Utilise l'état actuel de l'arrosage ou un message par défaut si non disponible\n        }\n    } else {\n        // Si le mode automatique n'est pas activé, pourrait définir etatArrosage à une valeur spécifique ou le laisser indéfini\n        etatArrosage=flow.get('state');\n    }\n}\n\n// Prépare le message de sortie avec l'état de l'arrosage\nlet msgSortie = { payload: etatArrosage };\n\n// Retourne le message de sortie\nreturn msgSortie;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 120,
        "wires": [
            [
                "5b7d87de8cbd7e68",
                "562e41d06bd5a4b3"
            ]
        ]
    },
    {
        "id": "30a02454f9801a96",
        "type": "debug",
        "z": "70ac6febe8cbd9d6",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 40,
        "wires": []
    },
    {
        "id": "39f9625d0de0a14d",
        "type": "function",
        "z": "70ac6febe8cbd9d6",
        "name": "gestion mode",
        "func": "let mode = null;\nmode=msg.payload;\n// Exemple pour stocker une valeur dans le contexte du flux\nflow.set('mode', mode);\n\n// Exemple pour récupérer une valeur du contexte du flux\nlet valeur = flow.get('mode');\nif (valeur == false) { msg.payload = \"AUTOMATIQUE\"; }\nelse msg.payload=\"MANUEL\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 720,
        "wires": [
            [
                "ee0c0656329e8caf"
            ]
        ]
    },
    {
        "id": "80dfdb49ef5cf3e6",
        "type": "debug",
        "z": "70ac6febe8cbd9d6",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 620,
        "wires": []
    },
    {
        "id": "632367f7e5db0a76",
        "type": "ui_gauge",
        "z": "70ac6febe8cbd9d6",
        "name": "",
        "group": "acf6166e3ac701ac",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "HUMIDITÉ DU SOL",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#e32400",
            "#e6e600",
            "#669c35"
        ],
        "seg1": "40",
        "seg2": "80",
        "diff": false,
        "className": "",
        "x": 590,
        "y": 200,
        "wires": []
    },
    {
        "id": "ee0c0656329e8caf",
        "type": "ui_text",
        "z": "70ac6febe8cbd9d6",
        "group": "acf6166e3ac701ac",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "MODE",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 610,
        "y": 720,
        "wires": []
    },
    {
        "id": "fe01de36507dfe1b",
        "type": "ui_text",
        "z": "70ac6febe8cbd9d6",
        "group": "acf6166e3ac701ac",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "ETAT POMPE",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 680,
        "y": 880,
        "wires": []
    },
    {
        "id": "8217d8d6b51196e5",
        "type": "change",
        "z": "70ac6febe8cbd9d6",
        "name": "ON/OFF",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "ON",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "OFF",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 880,
        "wires": [
            [
                "fe01de36507dfe1b"
            ]
        ]
    },
    {
        "id": "0b85e77470852183",
        "type": "mqtt in",
        "z": "70ac6febe8cbd9d6",
        "name": "",
        "topic": "ble/relay/command",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6ea126c6d2972499",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 880,
        "wires": [
            [
                "8217d8d6b51196e5",
                "a5adaee9213e59f2"
            ]
        ]
    },
    {
        "id": "b6ec993f3968460f",
        "type": "function",
        "z": "70ac6febe8cbd9d6",
        "name": "Sauvegarde Etat pompe",
        "func": "let state = null;\nstate=msg.payload;\n// Exemple pour stocker une valeur dans le contexte du flux\nflow.set('state', state);\n\n// Exemple pour récupérer une valeur du contexte du flux\nlet valeur = flow.get('state');\nif (valeur == true) { msg.payload = \"ON\"; }\nelse msg.payload=\"OFF\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 620,
        "wires": [
            [
                "80dfdb49ef5cf3e6"
            ]
        ]
    },
    {
        "id": "562e41d06bd5a4b3",
        "type": "mqtt out",
        "z": "70ac6febe8cbd9d6",
        "name": "",
        "topic": "ble/relay/command",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "6ea126c6d2972499",
        "x": 850,
        "y": 60,
        "wires": []
    },
    {
        "id": "6ea126c6d2972499",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "cb8132b80dc6faae",
        "type": "ui_group",
        "name": "COMMANDE POMPE",
        "tab": "b39b55419fe8e088",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "91953b41a430d82f",
        "type": "ui_group",
        "name": "MODE",
        "tab": "b39b55419fe8e088",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "acf6166e3ac701ac",
        "type": "ui_group",
        "name": "MESURES",
        "tab": "b39b55419fe8e088",
        "order": 9,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b39b55419fe8e088",
        "type": "ui_tab",
        "name": "DASHBOARD BLE",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
